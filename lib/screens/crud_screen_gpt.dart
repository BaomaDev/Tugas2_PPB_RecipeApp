/* GENERATED BY GPT FOR TESTING PURPOSES */
import 'package:flutter/material.dart';
import '../models/recipe.dart';
import '../services/recipe_service.dart';
import 'package:hive/hive.dart';

class RecipeStaticPage extends StatefulWidget {
  const RecipeStaticPage({super.key});

  @override
  State<RecipeStaticPage> createState() => _RecipeStaticPageState();
}

class _RecipeStaticPageState extends State<RecipeStaticPage> {
  final RecipeService _recipeService = RecipeService();
  List<Recipe> _recipes = [];

  @override
  void initState() {
    super.initState();

    // Tambahkan data statis hanya jika belum ada data
    if (_recipeService.getAllRecipes().isEmpty) {
      _recipeService.addRecipe(
        Recipe(
          id: DateTime.now().millisecondsSinceEpoch,
          title: 'Nasi Goreng',
          ingredients: ['Nasi', 'Telur', 'Kecap'],
          steps:
              '1. Tumis bawang\n2. Masukkan telur dan nasi\n3. Tambahkan kecap',
          createdAt: DateTime.now(),
        ),
      );
    }

    _loadRecipes();
  }

  void _loadRecipes() {
    setState(() {
      _recipes = _recipeService.getAllRecipes();
    });
  }

  void _editRecipeDialog(Recipe recipe, int key) {
    final titleController = TextEditingController(text: recipe.title);
    final ingredientsController = TextEditingController(
      text: recipe.ingredients.join(', '),
    );
    final stepsController = TextEditingController(text: recipe.steps);

    showDialog(
      context: context,
      builder:
          (_) => AlertDialog(
            title: Text('Edit Recipe'),
            content: SingleChildScrollView(
              child: Column(
                children: [
                  TextField(
                    controller: titleController,
                    decoration: InputDecoration(labelText: 'Title'),
                  ),
                  TextField(
                    controller: ingredientsController,
                    decoration: InputDecoration(labelText: 'Ingredients'),
                  ),
                  TextField(
                    controller: stepsController,
                    decoration: InputDecoration(labelText: 'Steps'),
                    maxLines: 3,
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () {
                  final updated = Recipe(
                    id: recipe.id,
                    title: titleController.text,
                    ingredients:
                        ingredientsController.text
                            .split(',')
                            .map((e) => e.trim())
                            .toList(),
                    steps: stepsController.text,
                    createdAt: recipe.createdAt,
                  );

                  _recipeService.updateRecipe(key, updated);
                  _loadRecipes();
                  Navigator.pop(context);
                },
                child: Text('Save'),
              ),
            ],
          ),
    );
  }

  void _deleteRecipe(int key) {
    _recipeService.deleteRecipe(key);
    _loadRecipes();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Recipe Static Page')),
      body: ListView.builder(
        itemCount: _recipes.length,
        itemBuilder: (context, index) {
          final recipe = _recipes[index];
          final key =
              _recipeService.getAllRecipes().length > index
                  ? Hive.box<Recipe>('recipes').keyAt(index) as int
                  : index;

          return Card(
            margin: EdgeInsets.all(12),
            child: ListTile(
              title: Text(recipe.title),
              subtitle: Text(recipe.ingredients.join(', ')),
              trailing: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  IconButton(
                    icon: Icon(Icons.edit, color: Colors.orange),
                    onPressed: () => _editRecipeDialog(recipe, key),
                  ),
                  IconButton(
                    icon: Icon(Icons.delete, color: Colors.red),
                    onPressed: () => _deleteRecipe(key),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
